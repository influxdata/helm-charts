apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "influxdb-enterprise.fullname" . }}-data
  labels:
    app.kubernetes.io/component: data
    {{- include "influxdb-enterprise.labels" . | nindent 4 }}
data:
  influxdb.conf: |+
    bind-address = ":8088"
    reporting-disabled = false

    [enterprise]
      {{ if .Values.license.key }}
      # license-key and license-path are mutually exclusive, use only one and leave the other blank
      license-key = "{{ .Values.license.key }}" #âœ¨ mutually exclusive with license-path
      {{ else }}
      # license-key and license-path are mutually exclusive, use only one and leave the other blank
      license-path = "/etc/influxdb/license.json"
      {{ end }}

    [meta]
      dir = "/var/lib/influxdb/meta"

    [hinted-handoff]
      dir = "/var/lib/influxdb/hh"

    [data]
      dir = "/var/lib/influxdb/data"
      wal-dir = "/var/lib/influxdb/wal"

  entrypoint.pl: |+

    #!/usr/bin/env perl
    $ENV{INFLUXDB_HOSTNAME} = `hostname -f`;
    $ENV{INFLUXDB_HOSTNAME} =~ s/\n$//;

    $pid = fork();

    # Inside this conditional is our child process, which
    # will return `influxd-meta`
    if($pid == 0) {
      exec('influxd') or die("Failed to execute influxd: $!\n");
    }

    $SIG{HUP} = sub { kill 'HUP', $pid };
    $SIG{TERM} = sub { kill 'TERM', $pid };
    $SIG{KILL} = sub { kill 'KILL', $pid };

    # Register data node with meta leader
    my $meta_leader = $ENV{INFLUXDB_HOSTNAME};
    $meta_leader =~ s/-[0-9]+./-0./;
    $meta_leader =~ s/data/meta/g;

    # We're not going to define an exit strategy for failure here.
    # This should be handled by the probes on the pods
    while (true) {
      # There's no LWP/Simple available in our images, so forking out to curl ðŸ˜¥
      print "Attempting to register with meta service ...\n";
      system('echo', 'curl', '-XPOST', "-Faddr=$ENV{INFLUXDB_HOSTNAME}:8088", "http://idb-meta:8091/add-data");
      system('curl', '-XPOST', "-Faddr=$ENV{INFLUXDB_HOSTNAME}:8088", "http://idb-meta:8091/add-data");

      if ($? == 0) {
        print "Success\n";
        last;
      }
      print "Failed: $!\n";

      # Wait a few seconds and try again
      # Maybe we should implement some rudamentary backoff
      sleep(2);
    }

    waitpid($pid, 0);
    exit $?
