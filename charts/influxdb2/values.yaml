image:
  repository: influxdb
  tag: 2.0.6-alpine
  pullPolicy: IfNotPresent

podAnnotations: {}

nameOverride: ""
fullnameOverride: ""

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

securityContext: {}

## Extra environment variables to configure influxdb
## e.g.
# env:
#   - name: FOO
#     value: BAR
#   - name: BAZ
#     valueFrom:
#       secretKeyRef:
#         name: my-secret
#         key: my-key
env: {}

## Create default user through docker entrypoint
## Defaults indicated below
##
adminUser:
  organization: "influxdata"
  bucket: "default"
  user: "admin"
  retention_policy: "0s"
  ## Leave empty to generate a random password and token.
  ## Or fill any of these values to use fixed values.
  password: ""
  token: ""

  ## The password and token are obtained from an existing secret. The expected
  ## keys are `admin-password` and `admin-token`.
  ## If set, the password and token values above are ignored.
  # existingSecret: influxdb-auth

## Persist data to a persistent volume
##
persistence:
  enabled: true
  ## If true will use an existing PVC instead of creating one
  # useExisting: false
  ## Name of existing PVC to be used in the influx deployment
  # name:
  ## influxdb data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: 50Gi
  mountPath: /var/lib/influxdbv2

service:
  type: ClusterIP
  port: 80
  targetPort: 8086
  annotations: {}
  labels: {}
  portName: http

ingress:
  enabled: false
  # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
  # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
  # ingressClassName: nginx
  tls: false
  # secretName: my-tls-cert # only needed if tls above is true
  hostname: influxdb.foobar.com
  annotations: {}
    # kubernetes.io/ingress.class: "nginx"
    # kubernetes.io/tls-acme: "true"
  path: /

## Pod disruption budget configuration
##
pdb:
  ## Specifies whether a Pod disruption budget should be created
  ##
  create: true
  minAvailable: 1
  # maxUnavailable: 1

serviceAccount:
  create: true
  name:
  annotations: {}

backup:
  # Setup a backup cronjob using rclone (https://rclone.org/)
  # rclone supports various backends which makes it easy to push
  # the backups to any backend service
  enabled: false
  # Annotates the CronJob
  annotations: {}
  # Setup your schedule to run the cronjob
  schedule: "0 0 * * *"
  startingDeadlineSeconds: ""
  podAnnotations: {}
  # emptyDir has been used as a transitory volume before uploading to the backend
  # store. Make sure that a sufficient ephemeral storage request is set to prevent
  # node disk filling completely.
  resources:
    requests:
      # memory: 512Mi
      # cpu: 2
      ephemeral-storage: 10Gi
    limits:
    # memory: 1Gi
    # cpu: 4
    # ephemeral-storage: 50Gi
  # The container is configured to only work with rclone as it already supports
  # GDrive, Amazon S3, Dropbox, FTP, HTTP, local etc.
  # More information at: https://rclone.org/overview/
  container:
    name: influxdb-rclone
    image: rclone/rclone:latest
    command:
      # config command is used to create the config required by rclone
      # Example for Mega.nz config
      # rclone config create remote mega user user@example.com pass MYPASSword --obscure
      config: rclone config create remote local
      # sync command transfers the local data volume at /backup to /influxdb-backup
      sync: rclone sync /backup remote:/influxdb-backup --progress --copy-links
    env: {}
